name: Staging Deployment

on:
  push:
    branches:
      - staging

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --frozen --all-extras --dev

      - name: Run linting
        run: |
          uv run ruff check .
          uv run black --check .

      - name: Run type checking
        run: |
          uv run mypy .

      - name: Run unit tests
        run: |
          uv run pytest tests/ -v --tb=short

  build-and-push-staging:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to private registry
        uses: docker/login-action@v2
        with:
          registry: registry.pitchai.net:5000
          username: dev
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image for staging
        run: |
          IMAGE_NAME=registry.pitchai.net:5000/monitoring-system
          TAG=staging-${GITHUB_SHA::7}
          docker build -t $IMAGE_NAME:$TAG .
          docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:staging
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Push Docker images
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_NAME }}:staging

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push-staging
    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          port: 22
          script: |
            echo "Logging in to private registry..."
            docker login registry.pitchai.net:5000 -u dev -p ${{ secrets.REGISTRY_PASSWORD }}
            
            echo "Pulling latest staging Docker image..."
            docker pull registry.pitchai.net:5000/monitoring-system:staging
            
            echo "Stopping existing staging container..."
            docker stop monitoring-staging || true
            
            echo "Removing existing staging container..."
            docker rm monitoring-staging || true
            
            echo "Starting new staging container..."
            docker run -d \
              --name monitoring-staging \
              -p 8001:8000 \
              --restart unless-stopped \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v /var/log:/var/log:ro \
              -e HETZNER_HOST=${{ secrets.HETZNER_HOST }} \
              -e HETZNER_USER=${{ secrets.HETZNER_USER }} \
              -e DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }} \
              -e REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }} \
              -e WEBSITE_URL=${{ secrets.WEBSITE_URL }} \
              -e POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }} \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              registry.pitchai.net:5000/monitoring-system:staging
            
            echo "Checking container status..."
            docker ps | grep monitoring-staging
            
            echo "Waiting for container to stabilize..."
            sleep 15
            
            echo "Checking container health..."
            curl -f http://localhost:8001/ || echo "Health check failed"
            
            echo "Checking container logs..."
            docker logs monitoring-staging --tail 50
            
            echo "Staging deployment complete!"